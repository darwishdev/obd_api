// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: review.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const reviewCreate = `-- name: ReviewCreate :one
INSERT INTO
    reviews (user_id, center_id, review, rate)
VALUES
    ($1,$2,$3,$4) RETURNING review_id, user_id, center_id, review, rate, created_at
`

type ReviewCreateParams struct {
	UserID   int64  `json:"user_id"`
	CenterID int64  `json:"center_id"`
	Review   string `json:"review"`
	Rate     int16  `json:"rate"`
}

func (q *Queries) ReviewCreate(ctx context.Context, arg ReviewCreateParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, reviewCreate,
		arg.UserID,
		arg.CenterID,
		arg.Review,
		arg.Rate,
	)
	var i Review
	err := row.Scan(
		&i.ReviewID,
		&i.UserID,
		&i.CenterID,
		&i.Review,
		&i.Rate,
		&i.CreatedAt,
	)
	return i, err
}

const reviewsList = `-- name: ReviewsList :many
SELECT
    u.name user_name , c.name center_name , r.review , r.rate , r.created_at
FROM
    reviews r
    JOIN users u ON r.user_id = u.user_id
    JOIN centers c ON r.center_id = c.center_id
WHERE
    r.user_id = coalesce($1, r.user_id)
    AND r.center_id = coalesce($2, r.center_id)
`

type ReviewsListParams struct {
	UserID   sql.NullInt64 `json:"user_id"`
	CenterID sql.NullInt64 `json:"center_id"`
}

type ReviewsListRow struct {
	UserName   string    `json:"user_name"`
	CenterName string    `json:"center_name"`
	Review     string    `json:"review"`
	Rate       int16     `json:"rate"`
	CreatedAt  time.Time `json:"created_at"`
}

func (q *Queries) ReviewsList(ctx context.Context, arg ReviewsListParams) ([]ReviewsListRow, error) {
	rows, err := q.db.QueryContext(ctx, reviewsList, arg.UserID, arg.CenterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ReviewsListRow{}
	for rows.Next() {
		var i ReviewsListRow
		if err := rows.Scan(
			&i.UserName,
			&i.CenterName,
			&i.Review,
			&i.Rate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
