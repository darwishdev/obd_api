// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: centers.sql

package db

import (
	"context"
)

const centerCreate = `-- name: CenterCreate :one
INSERT INTO
    centers (
        name,
        phone,
        location,
        address,
        area_id,
        lat,
        long
    )
VALUES
    ($1, $2, $3, $4, $5, $6, $7) RETURNING center_id, name, phone, location, address, area_id, lat, long, created_at, deleted_at
`

type CenterCreateParams struct {
	Name     string `json:"name"`
	Phone    string `json:"phone"`
	Location string `json:"location"`
	Address  string `json:"address"`
	AreaID   int64  `json:"area_id"`
	Lat      string `json:"lat"`
	Long     string `json:"long"`
}

func (q *Queries) CenterCreate(ctx context.Context, arg CenterCreateParams) (Center, error) {
	row := q.db.QueryRowContext(ctx, centerCreate,
		arg.Name,
		arg.Phone,
		arg.Location,
		arg.Address,
		arg.AreaID,
		arg.Lat,
		arg.Long,
	)
	var i Center
	err := row.Scan(
		&i.CenterID,
		&i.Name,
		&i.Phone,
		&i.Location,
		&i.Address,
		&i.AreaID,
		&i.Lat,
		&i.Long,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const centersList = `-- name: CentersList :many
SELECT
    center_id, name, phone, location, address, area_id, lat, long, created_at, deleted_at
FROM
    centers
WHERE
    area_id = $1
    AND deleted_at IS NULL
`

func (q *Queries) CentersList(ctx context.Context, areaID int64) ([]Center, error) {
	rows, err := q.db.QueryContext(ctx, centersList, areaID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Center{}
	for rows.Next() {
		var i Center
		if err := rows.Scan(
			&i.CenterID,
			&i.Name,
			&i.Phone,
			&i.Location,
			&i.Address,
			&i.AreaID,
			&i.Lat,
			&i.Long,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
