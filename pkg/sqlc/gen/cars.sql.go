// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: cars.sql

package db

import (
	"context"
	"database/sql"
)

const carBrandModelsList = `-- name: CarBrandModelsList :many
SELECT car_brand_model_id, name, start_year, end_year, car_brand_id FROM car_brand_models WHERE  car_brand_id = $1
`

func (q *Queries) CarBrandModelsList(ctx context.Context, carBrandID int64) ([]CarBrandModel, error) {
	rows, err := q.db.QueryContext(ctx, carBrandModelsList, carBrandID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CarBrandModel{}
	for rows.Next() {
		var i CarBrandModel
		if err := rows.Scan(
			&i.CarBrandModelID,
			&i.Name,
			&i.StartYear,
			&i.EndYear,
			&i.CarBrandID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const carBrandsList = `-- name: CarBrandsList :many
SELECT car_brand_id, name FROM car_brands
`

func (q *Queries) CarBrandsList(ctx context.Context) ([]CarBrand, error) {
	rows, err := q.db.QueryContext(ctx, carBrandsList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CarBrand{}
	for rows.Next() {
		var i CarBrand
		if err := rows.Scan(&i.CarBrandID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const carCreate = `-- name: CarCreate :one
INSERT INTO
    cars (
        car_brand_model_id,
        user_id,
        model_year
    )
VALUES
    ($1, $2, $3) RETURNING car_id, car_brand_model_id, user_id, model_year, created_at, deleted_at
`

type CarCreateParams struct {
	CarBrandModelID int64 `json:"car_brand_model_id"`
	UserID          int64 `json:"user_id"`
	ModelYear       int32 `json:"model_year"`
}

func (q *Queries) CarCreate(ctx context.Context, arg CarCreateParams) (Car, error) {
	row := q.db.QueryRowContext(ctx, carCreate, arg.CarBrandModelID, arg.UserID, arg.ModelYear)
	var i Car
	err := row.Scan(
		&i.CarID,
		&i.CarBrandModelID,
		&i.UserID,
		&i.ModelYear,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const carUpdate = `-- name: CarUpdate :one
UPDATE cars 
SET
    car_brand_model_id =coalesce($1, car_brand_model_id),
    model_year =coalesce($2, model_year)
    WHERE car_id = $3
    RETURNING car_id, car_brand_model_id, user_id, model_year, created_at, deleted_at
`

type CarUpdateParams struct {
	CarBrandModelID sql.NullInt64 `json:"car_brand_model_id"`
	ModelYear       sql.NullInt32 `json:"model_year"`
	CarID           int64         `json:"car_id"`
}

func (q *Queries) CarUpdate(ctx context.Context, arg CarUpdateParams) (Car, error) {
	row := q.db.QueryRowContext(ctx, carUpdate, arg.CarBrandModelID, arg.ModelYear, arg.CarID)
	var i Car
	err := row.Scan(
		&i.CarID,
		&i.CarBrandModelID,
		&i.UserID,
		&i.ModelYear,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}
