// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: area.sql

package db

import (
	"context"
)

const areaCreate = `-- name: AreaCreate :one
INSERT INTO areas (name) VALUES ($1) RETURNING area_id, name
`

func (q *Queries) AreaCreate(ctx context.Context, name string) (Area, error) {
	row := q.db.QueryRowContext(ctx, areaCreate, name)
	var i Area
	err := row.Scan(&i.AreaID, &i.Name)
	return i, err
}

const areaDelete = `-- name: AreaDelete :exec
DELETE  FROM areas WHERE area_id = $1
`

func (q *Queries) AreaDelete(ctx context.Context, areaID int64) error {
	_, err := q.db.ExecContext(ctx, areaDelete, areaID)
	return err
}

const areasList = `-- name: AreasList :many
SELECT area_id, name FROM areas
`

func (q *Queries) AreasList(ctx context.Context) ([]Area, error) {
	rows, err := q.db.QueryContext(ctx, areasList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Area{}
	for rows.Next() {
		var i Area
		if err := rows.Scan(&i.AreaID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
