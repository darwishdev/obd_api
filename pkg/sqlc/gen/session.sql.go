// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: session.sql

package db

import (
	"context"
)

const sessionAttachCode = `-- name: SessionAttachCode :one
INSERT INTO
    "session_codes" (
        session_id,
        code_id
    )
VALUES
    ($1  , $2) RETURNING session_code_id, session_id, code_id
`

type SessionAttachCodeParams struct {
	SessionID int64 `json:"session_id"`
	CodeID    int64 `json:"code_id"`
}

func (q *Queries) SessionAttachCode(ctx context.Context, arg SessionAttachCodeParams) (SessionCode, error) {
	row := q.db.QueryRowContext(ctx, sessionAttachCode, arg.SessionID, arg.CodeID)
	var i SessionCode
	err := row.Scan(&i.SessionCodeID, &i.SessionID, &i.CodeID)
	return i, err
}

const sessionAttachValue = `-- name: SessionAttachValue :one
INSERT INTO
    "session_values" (
        session_id,
        value_key,
        value_data
    )
VALUES
    ($1 , $2 , $3) RETURNING session_value_id, session_id, value_key, value_data
`

type SessionAttachValueParams struct {
	SessionID int64  `json:"session_id"`
	ValueKey  string `json:"value_key"`
	ValueData string `json:"value_data"`
}

func (q *Queries) SessionAttachValue(ctx context.Context, arg SessionAttachValueParams) (SessionValue, error) {
	row := q.db.QueryRowContext(ctx, sessionAttachValue, arg.SessionID, arg.ValueKey, arg.ValueData)
	var i SessionValue
	err := row.Scan(
		&i.SessionValueID,
		&i.SessionID,
		&i.ValueKey,
		&i.ValueData,
	)
	return i, err
}

const sessionClose = `-- name: SessionClose :one
UPDATE
    "sessions"
SET
    finished_at = NOW()
WHERE
    session_id = $1 RETURNING session_id, car_id, is_live, created_at, finished_at
`

func (q *Queries) SessionClose(ctx context.Context, sessionID int64) (Session, error) {
	row := q.db.QueryRowContext(ctx, sessionClose, sessionID)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.CarID,
		&i.IsLive,
		&i.CreatedAt,
		&i.FinishedAt,
	)
	return i, err
}

const sessionCreate = `-- name: SessionCreate :one
INSERT INTO
    "sessions" (
        car_id,
        is_live
    )
VALUES
    ($1 , $2) RETURNING session_id, car_id, is_live, created_at, finished_at
`

type SessionCreateParams struct {
	CarID  int64 `json:"car_id"`
	IsLive bool  `json:"is_live"`
}

func (q *Queries) SessionCreate(ctx context.Context, arg SessionCreateParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, sessionCreate, arg.CarID, arg.IsLive)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.CarID,
		&i.IsLive,
		&i.CreatedAt,
		&i.FinishedAt,
	)
	return i, err
}

const sessionsList = `-- name: SessionsList :many
SELECT session_id, car_id, is_live, created_at, finished_at FROM "sessions" WHERE car_id = $1
`

func (q *Queries) SessionsList(ctx context.Context, carID int64) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, sessionsList, carID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Session{}
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.SessionID,
			&i.CarID,
			&i.IsLive,
			&i.CreatedAt,
			&i.FinishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
