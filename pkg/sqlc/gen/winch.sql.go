// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: winch.sql

package db

import (
	"context"
)

const winchClean = `-- name: WinchClean :exec
DELETE FROM winch
`

func (q *Queries) WinchClean(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, winchClean)
	return err
}

const winchCreate = `-- name: WinchCreate :one
INSERT INTO
    winch (
        area_id,
        name,
        phone,
        lat,
        long,
        driver_name,
        driver_phone
    )
VALUES
    ($1, $2, $3, $4, $5 , $6 , $7) RETURNING winch_id, area_id, name, phone, driver_name, driver_phone, lat, long, created_at, deleted_at
`

type WinchCreateParams struct {
	AreaID      int64   `json:"area_id"`
	Name        string  `json:"name"`
	Phone       string  `json:"phone"`
	Lat         float32 `json:"lat"`
	Long        float32 `json:"long"`
	DriverName  string  `json:"driver_name"`
	DriverPhone string  `json:"driver_phone"`
}

func (q *Queries) WinchCreate(ctx context.Context, arg WinchCreateParams) (Winch, error) {
	row := q.db.QueryRowContext(ctx, winchCreate,
		arg.AreaID,
		arg.Name,
		arg.Phone,
		arg.Lat,
		arg.Long,
		arg.DriverName,
		arg.DriverPhone,
	)
	var i Winch
	err := row.Scan(
		&i.WinchID,
		&i.AreaID,
		&i.Name,
		&i.Phone,
		&i.DriverName,
		&i.DriverPhone,
		&i.Lat,
		&i.Long,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const winchList = `-- name: WinchList :many
SELECT winch_id, area_id, name, phone, driver_name, driver_phone, lat, long, created_at, distance FROM find_winch($1, $2)
`

type WinchListParams struct {
	InLat  float64 `json:"in_lat"`
	InLong float64 `json:"in_long"`
}

func (q *Queries) WinchList(ctx context.Context, arg WinchListParams) ([]WinchInfo, error) {
	rows, err := q.db.QueryContext(ctx, winchList, arg.InLat, arg.InLong)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WinchInfo{}
	for rows.Next() {
		var i WinchInfo
		if err := rows.Scan(
			&i.WinchID,
			&i.AreaID,
			&i.Name,
			&i.Phone,
			&i.DriverName,
			&i.DriverPhone,
			&i.Lat,
			&i.Long,
			&i.CreatedAt,
			&i.Distance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
