// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: winch.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const winchCreate = `-- name: WinchCreate :one
INSERT INTO
    winch (
        area_id,
        name,
        phone,
        driver_name,
        driver_phone
    )
VALUES
    ($1, $2, $3, $4, $5) RETURNING winch_id, area_id, name, phone, driver_name, driver_phone, created_at, deleted_at
`

type WinchCreateParams struct {
	AreaID      int64  `json:"area_id"`
	Name        string `json:"name"`
	Phone       string `json:"phone"`
	DriverName  string `json:"driver_name"`
	DriverPhone string `json:"driver_phone"`
}

func (q *Queries) WinchCreate(ctx context.Context, arg WinchCreateParams) (Winch, error) {
	row := q.db.QueryRowContext(ctx, winchCreate,
		arg.AreaID,
		arg.Name,
		arg.Phone,
		arg.DriverName,
		arg.DriverPhone,
	)
	var i Winch
	err := row.Scan(
		&i.WinchID,
		&i.AreaID,
		&i.Name,
		&i.Phone,
		&i.DriverName,
		&i.DriverPhone,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const winchList = `-- name: WinchList :many
SELECT
    w.winch_id, w.area_id, w.name, w.phone, w.driver_name, w.driver_phone, w.created_at, w.deleted_at , a.name area_name
FROM
    winch w JOIN areas a ON w.area_id = a.area_id
WHERE
    a.area_id = $1
    AND deleted_at IS NULL
`

type WinchListRow struct {
	WinchID     int64        `json:"winch_id"`
	AreaID      int64        `json:"area_id"`
	Name        string       `json:"name"`
	Phone       string       `json:"phone"`
	DriverName  string       `json:"driver_name"`
	DriverPhone string       `json:"driver_phone"`
	CreatedAt   time.Time    `json:"created_at"`
	DeletedAt   sql.NullTime `json:"deleted_at"`
	AreaName    string       `json:"area_name"`
}

func (q *Queries) WinchList(ctx context.Context, areaID int64) ([]WinchListRow, error) {
	rows, err := q.db.QueryContext(ctx, winchList, areaID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WinchListRow{}
	for rows.Next() {
		var i WinchListRow
		if err := rows.Scan(
			&i.WinchID,
			&i.AreaID,
			&i.Name,
			&i.Phone,
			&i.DriverName,
			&i.DriverPhone,
			&i.CreatedAt,
			&i.DeletedAt,
			&i.AreaName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
