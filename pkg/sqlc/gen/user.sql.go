// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const userCreate = `-- name: UserCreate :one
SELECT user_id, name, phone, email, password, password_changed_at, created_at, deleted_at, car_user_id, car_id, car_brand_model_id, car_brand_id, brand_name, brand_model_name, model_year FROM user_create(
$1,
$2,
$3,
$4,
$5,
$6)
`

type UserCreateParams struct {
	NameArg            string `json:"name_arg"`
	PhoneArg           string `json:"phone_arg"`
	EmailArg           string `json:"email_arg"`
	PasswordArg        string `json:"password_arg"`
	CarBrandModelIDArg int32  `json:"car_brand_model_id_arg"`
	ModelYearArg       int32  `json:"model_year_arg"`
}

func (q *Queries) UserCreate(ctx context.Context, arg UserCreateParams) (UserInfo, error) {
	row := q.db.QueryRowContext(ctx, userCreate,
		arg.NameArg,
		arg.PhoneArg,
		arg.EmailArg,
		arg.PasswordArg,
		arg.CarBrandModelIDArg,
		arg.ModelYearArg,
	)
	var i UserInfo
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Password,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.CarUserID,
		&i.CarID,
		&i.CarBrandModelID,
		&i.CarBrandID,
		&i.BrandName,
		&i.BrandModelName,
		&i.ModelYear,
	)
	return i, err
}

const userDelete = `-- name: UserDelete :one
UPDATE
  users
SET
  deleted_at = now()
WHERE
  user_id = $1 RETURNING user_id, name, phone, email, password, password_changed_at, created_at, deleted_at
`

func (q *Queries) UserDelete(ctx context.Context, userID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, userDelete, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Password,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const userGet = `-- name: UserGet :one
SELECT
  user_id, name, phone, email, password, password_changed_at, created_at, deleted_at, car_user_id, car_id, car_brand_model_id, car_brand_id, brand_name, brand_model_name, model_year
FROM
  user_info u
WHERE
  u.user_id = $1
`

func (q *Queries) UserGet(ctx context.Context, userID int64) (UserInfo, error) {
	row := q.db.QueryRowContext(ctx, userGet, userID)
	var i UserInfo
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Password,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.CarUserID,
		&i.CarID,
		&i.CarBrandModelID,
		&i.CarBrandID,
		&i.BrandName,
		&i.BrandModelName,
		&i.ModelYear,
	)
	return i, err
}

const userGetByUsername = `-- name: UserGetByUsername :one
SELECT
  user_id, name, phone, email, password, password_changed_at, created_at, deleted_at, car_user_id, car_id, car_brand_model_id, car_brand_id, brand_name, brand_model_name, model_year
FROM
  user_info u
WHERE
  email = $1
  OR phone = $1
`

func (q *Queries) UserGetByUsername(ctx context.Context, email string) (UserInfo, error) {
	row := q.db.QueryRowContext(ctx, userGetByUsername, email)
	var i UserInfo
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Password,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.CarUserID,
		&i.CarID,
		&i.CarBrandModelID,
		&i.CarBrandID,
		&i.BrandName,
		&i.BrandModelName,
		&i.ModelYear,
	)
	return i, err
}

const userUpdate = `-- name: UserUpdate :one
UPDATE
  users
SET
  name = coalesce($1, name),
  phone = coalesce($2, phone),
  email = coalesce($3, email),
  password = coalesce($4, password),
  password_changed_at = CASE
                          WHEN $4 IS NULL THEN password_changed_at
                          ELSE now()
                        END
WHERE
  user_id = $5 RETURNING user_id, name, phone, email, password, password_changed_at, created_at, deleted_at
`

type UserUpdateParams struct {
	Name     sql.NullString `json:"name"`
	Phone    sql.NullString `json:"phone"`
	Email    sql.NullString `json:"email"`
	Password sql.NullString `json:"password"`
	UserID   int64          `json:"user_id"`
}

func (q *Queries) UserUpdate(ctx context.Context, arg UserUpdateParams) (User, error) {
	row := q.db.QueryRowContext(ctx, userUpdate,
		arg.Name,
		arg.Phone,
		arg.Email,
		arg.Password,
		arg.UserID,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Password,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const usersList = `-- name: UsersList :many
SELECT
  user_id, name, phone, email, password, password_changed_at, created_at, deleted_at
FROM
  users
WHERE
  deleted_at IS NULL
ORDER BY
  user_id
LIMIT
  $1 OFFSET $2
`

type UsersListParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) UsersList(ctx context.Context, arg UsersListParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, usersList, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Name,
			&i.Phone,
			&i.Email,
			&i.Password,
			&i.PasswordChangedAt,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
