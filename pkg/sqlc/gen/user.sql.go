// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: user.sql

package db

import (
	"context"
)

const userCreate = `-- name: UserCreate :one
INSERT INTO users (
  name,
  phone,
  email,
  password
) VALUES (
  $1, $2,$3, $4
) RETURNING user_id, name, phone, email, password, password_changed_at, created_at, deleted_at
`

type UserCreateParams struct {
	Name     string `json:"name"`
	Phone    string `json:"phone"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) UserCreate(ctx context.Context, arg UserCreateParams) (User, error) {
	row := q.db.QueryRowContext(ctx, userCreate,
		arg.Name,
		arg.Phone,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Password,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const userDelete = `-- name: UserDelete :one
UPDATE users
SET deleted_at = now()
WHERE user_id = $1
RETURNING user_id, name, phone, email, password, password_changed_at, created_at, deleted_at
`

func (q *Queries) UserDelete(ctx context.Context, userID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, userDelete, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Password,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const userGet = `-- name: UserGet :one
SELECT user_id, name, phone, email, password, password_changed_at, created_at, deleted_at FROM users
WHERE user_id = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) UserGet(ctx context.Context, userID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, userGet, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Password,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const userGetByUsername = `-- name: UserGetByUsername :one
SELECT user_id, name, phone, email, password, password_changed_at, created_at, deleted_at FROM users
WHERE (email = $1 OR phone = $1) AND deleted_at IS NULL
`

func (q *Queries) UserGetByUsername(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, userGetByUsername, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Password,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const userUpdate = `-- name: UserUpdate :one
UPDATE users
SET "name" = $2 , "phone" = $3 ,  "email" = $4 , "password" = $5
WHERE user_id = $1
RETURNING user_id, name, phone, email, password, password_changed_at, created_at, deleted_at
`

type UserUpdateParams struct {
	UserID   int64  `json:"user_id"`
	Name     string `json:"name"`
	Phone    string `json:"phone"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) UserUpdate(ctx context.Context, arg UserUpdateParams) (User, error) {
	row := q.db.QueryRowContext(ctx, userUpdate,
		arg.UserID,
		arg.Name,
		arg.Phone,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Password,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const usersList = `-- name: UsersList :many
SELECT user_id, name, phone, email, password, password_changed_at, created_at, deleted_at FROM users WHERE deleted_at IS NULL 
ORDER BY user_id
LIMIT $1
OFFSET $2
`

type UsersListParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) UsersList(ctx context.Context, arg UsersListParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, usersList, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Name,
			&i.Phone,
			&i.Email,
			&i.Password,
			&i.PasswordChangedAt,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
