// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: obd/v1/obd_service.proto

package obdv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	_ "github.com/darwishdev/obd_api/pkg/pb/obd/v1"
	user "github.com/darwishdev/obd_api/pkg/pb/obd/v1/user"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ObdName is the fully-qualified name of the Obd service.
	ObdName = "obd.v1.Obd"
)

// ObdClient is a client for the obd.v1.Obd service.
type ObdClient interface {
	UserCreate(context.Context, *connect_go.Request[user.UserCreateRequest]) (*connect_go.Response[user.UserCreateResponse], error)
	UserLogin(context.Context, *connect_go.Request[user.UserLoginRequest]) (*connect_go.Response[user.UserLoginResponse], error)
}

// NewObdClient constructs a client for the obd.v1.Obd service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewObdClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ObdClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &obdClient{
		userCreate: connect_go.NewClient[user.UserCreateRequest, user.UserCreateResponse](
			httpClient,
			baseURL+"/obd.v1.Obd/UserCreate",
			opts...,
		),
		userLogin: connect_go.NewClient[user.UserLoginRequest, user.UserLoginResponse](
			httpClient,
			baseURL+"/obd.v1.Obd/UserLogin",
			opts...,
		),
	}
}

// obdClient implements ObdClient.
type obdClient struct {
	userCreate *connect_go.Client[user.UserCreateRequest, user.UserCreateResponse]
	userLogin  *connect_go.Client[user.UserLoginRequest, user.UserLoginResponse]
}

// UserCreate calls obd.v1.Obd.UserCreate.
func (c *obdClient) UserCreate(ctx context.Context, req *connect_go.Request[user.UserCreateRequest]) (*connect_go.Response[user.UserCreateResponse], error) {
	return c.userCreate.CallUnary(ctx, req)
}

// UserLogin calls obd.v1.Obd.UserLogin.
func (c *obdClient) UserLogin(ctx context.Context, req *connect_go.Request[user.UserLoginRequest]) (*connect_go.Response[user.UserLoginResponse], error) {
	return c.userLogin.CallUnary(ctx, req)
}

// ObdHandler is an implementation of the obd.v1.Obd service.
type ObdHandler interface {
	UserCreate(context.Context, *connect_go.Request[user.UserCreateRequest]) (*connect_go.Response[user.UserCreateResponse], error)
	UserLogin(context.Context, *connect_go.Request[user.UserLoginRequest]) (*connect_go.Response[user.UserLoginResponse], error)
}

// NewObdHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewObdHandler(svc ObdHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/obd.v1.Obd/UserCreate", connect_go.NewUnaryHandler(
		"/obd.v1.Obd/UserCreate",
		svc.UserCreate,
		opts...,
	))
	mux.Handle("/obd.v1.Obd/UserLogin", connect_go.NewUnaryHandler(
		"/obd.v1.Obd/UserLogin",
		svc.UserLogin,
		opts...,
	))
	return "/obd.v1.Obd/", mux
}

// UnimplementedObdHandler returns CodeUnimplemented from all methods.
type UnimplementedObdHandler struct{}

func (UnimplementedObdHandler) UserCreate(context.Context, *connect_go.Request[user.UserCreateRequest]) (*connect_go.Response[user.UserCreateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("obd.v1.Obd.UserCreate is not implemented"))
}

func (UnimplementedObdHandler) UserLogin(context.Context, *connect_go.Request[user.UserLoginRequest]) (*connect_go.Response[user.UserLoginResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("obd.v1.Obd.UserLogin is not implemented"))
}
